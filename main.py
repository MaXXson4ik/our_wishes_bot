
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import json
import os
import logging

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = "data.json"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"–ö–æ—Ç–∏–∫": {}, "–°–æ–ª–Ω—ã—à–∫–æ": {}}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ö–æ—Ç–∏–∫", callback_data="user_–ö–æ—Ç–∏–∫"),
         InlineKeyboardButton("–°–æ–ª–Ω—ã—à–∫–æ", callback_data="user_–°–æ–ª–Ω—ã—à–∫–æ")]
    ]
    await update.message.reply_text("–ö—Ç–æ —Ç—ã?", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_user_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.data.split("_")[1]
    user_states[query.from_user.id] = {"user": user}
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="view_categories")]
    ]
    await query.edit_message_text(f"–ü—Ä–∏–≤–µ—Ç, {user}!", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    state = user_states.get(user_id)
    if not state:
        return await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")

    data = load_data()
    user = state["user"]

    if query.data == "add_category":
        user_states[user_id]["action"] = "add_category"
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    elif query.data == "view_categories":
        categories = data[user]
        if not categories:
            await query.edit_message_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]]))
        else:
            keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat_{cat}")] for cat in categories]
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data.startswith("cat_"):
        cat = query.data.split("_", 1)[1]
        user_states[user_id]["category"] = cat
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="add_link")],
            [InlineKeyboardButton("üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Å—ã–ª–∫–∏", callback_data="show_links")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="view_categories")]
        ]
        await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "add_link":
        user_states[user_id]["action"] = "add_link_name"
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:")
    elif query.data == "show_links":
        cat = state.get("category")
        links = data[user].get(cat, [])
        if not links:
            text = "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫."
        else:
            text = "\n".join([f"{i+1}. {item['name']} - {item['url']}" for i, item in enumerate(links)])
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"cat_{cat}")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "back":
        await handle_user_choice(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    state = user_states.get(user_id)
    if not state:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /start")

    action = state.get("action")
    data = load_data()
    user = state["user"]

    if action == "add_category":
        category_name = update.message.text.strip()
        if category_name not in data[user]:
            data[user][category_name] = []
            save_data(data)
            await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text("–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å.")
        user_states[user_id].pop("action", None)
    elif action == "add_link_name":
        state["temp_name"] = update.message.text.strip()
        state["action"] = "add_link_url"
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É:")
    elif action == "add_link_url":
        url = update.message.text.strip()
        name = state.get("temp_name")
        category = state.get("category")
        if name and category:
            data[user][category].append({"name": name, "url": url})
            save_data(data)
            await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.")
        state.pop("action", None)
        state.pop("temp_name", None)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.")

def main():
    token = os.environ.get("BOT_TOKEN")
    if not token:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_user_choice, pattern="^user_"))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.")
    app.run_polling()

if __name__ == "__main__":
    main()
